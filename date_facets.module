<?php

/**
 * @file
 * Provides date range facets that are similar to implementations in major search engines.
 */

/**
 * Implements hook_facetapi_facet_info_alter().
 *
 * @see date_facets_add_widget()
 */
function date_facets_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  switch ($searcher_info['adapter']) {
    case 'apachesolr':
    case 'search':
      date_facets_associate_widget($facet_info);
      break;
  }
}

/**
 * Associates all date fields with the "date_range" query type.
 *
 * @param array &$facet_info
 *   The facet definitions passed to hook_facetapi_facet_info_alter().
 */
function date_facets_associate_widget(array &$facet_info) {
  foreach ($facet_info as $name => $info) {
    $query_types = array_flip($info['query types']);
    if (isset($query_types['date'])) {
      $facet_info[$name]['query types'][] = 'date_range';
    }
  }
}

/**
 * Returns render arrays for all date ranges.
 *
 * @return array
 *   An associative array of date ranges.
 *
 * @todo Implement an alter hook?
 */
function date_facets_get_ranges() {
  $build = array();

  $build['past_hour'] = array(
    '#count' => NULL,
    '#markup' => t('Past hour'),
  );

  $build['past_24_hours'] = array(
    '#count' => NULL,
    '#markup' => t('Past 24 hours'),
  );

  $build['past_week'] = array(
    '#count' => NULL,
    '#markup' => t('Past week'),
  );

  $build['past_month'] = array(
    '#count' => NULL,
    '#markup' => t('Past month'),
  );

  $build['past_year'] = array(
    '#count' => NULL,
    '#markup' => t('Past year'),
  );

  return $build;
}

/**
 * Implements hook_theme().
 */
function date_facets_theme() {
  return array(
    'date_facets_tabledrag_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Add a tabledrag table for date ranges on the given date facet.
 */
function theme_date_facets_tabledrag_form($variables) {
  $form = $variables['form'];
  $header = array(
    array('data' => t('Name !required', array('!required' => '<span class="form-required" title="' . t('This field is required.') . '">*</span>'))),
    array('data' => t('Date Range !required', array('!required' => '<span class="form-required" title="' . t('This field is required.') . '">*</span>')), 'colspan' => 2),
    array('data' => t('Weight')),
    array('data' => t('Delete'))
  );
  drupal_add_tabledrag('facetapi-date-range-query-date-ranges', 'order', 'self', 'date-range-weight');
  $rows = array();
  foreach (element_children($form['widget']['widget_settings']['ranges']) as $range_key) {
    $row = array();
    unset($form['widget']['widget_settings']['ranges'][$range_key]['label']['#title']);
    $row[] = drupal_render($form['widget']['widget_settings']['ranges'][$range_key]['label'])
      . drupal_render($form['widget']['widget_settings']['ranges'][$range_key]['machine_name']);
    foreach (array('date_range_start', 'date_range_end') as $element) {
      $temp_row = '';
      foreach (array('op', 'amount', 'unit') as $item) {
        unset($form['widget']['widget_settings']['ranges'][$range_key][$element . '_' . $item]['#title']);
        $temp_row .= drupal_render($form['widget']['widget_settings']['ranges'][$range_key][$element . '_' . $item]);
      }
      $row[] = $temp_row;
    }
    foreach (array('weight', 'delete') as $element) {
      unset($form['widget']['widget_settings']['ranges'][$range_key][$element]['#title']);
      $row[] = drupal_render($form['widget']['widget_settings']['ranges'][$range_key][$element]);
    }
    $rows[] = array(
      'data' => $row,
      'class' => array('draggable'),
    );
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'facetapi-date-range-query-date-ranges')));
  $form['widget']['widget_settings']['date_ranges']['ranges'] = array(
    '#type' => 'markup',
    '#markup' => $output,
    '#weight' => 0,
  );
  return drupal_render_children($form);
}

function date_facets_tabledrag_form_validate($form, &$form_state) {
  $error = FALSE;
  $temp_error = FALSE;
  foreach ($form_state['values']['ranges'] as $range_key => $range_data) {
    if ($range_data['delete']) {
      unset($form_state['values']['ranges'][$range_key]);
      continue;
    }
    foreach (array('date_range_start', 'date_range_end') as $item) {
      if ($range_data[$item . '_op'] != 'NOW') {
        if (empty($range_data[$item . '_amount'])) {
          $key = $item . '_amount';
          form_set_error("ranges][$range_key][$key", t('You must enter an amount.'));
          $error = TRUE;
        }
      }
    }
    foreach (array('label', 'machine_name') as $element) {
      if (empty($range_data[$element])) {
        form_set_error("ranges][$range_key][$element", t('!item is required.', array('!item' => '<em>' . $element . '</em>')));
        $error = TRUE;
        if ($range_key == 'temp') {
          $temp_error = TRUE;
        }
      }
    }
  }
  if (isset($form_state['values']['ranges']['temp']) && !$temp_error) {
    $machine_name = $form_state['values']['ranges']['temp']['machine_name'];
    $form_state['values']['ranges'][$machine_name] = $form_state['values']['ranges']['temp'];
    unset($form_state['values']['ranges']['temp']);
  }
  return !$error;
}

function date_facets_date_range_exists($label) {
  return FALSE;
}

function date_facets_tabledrag_form_new_range($form, &$form_state) {
  $form_state['add_new_range'] = TRUE;
  return drupal_rebuild_form($form['#form_id'], $form_state, $form);
}
